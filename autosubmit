#!/bin/bash

scriptName=$(basename $0)
sleepTime=60


function print_usage {
    echo "Usage: $scriptName <command> [command-args]"
    echo ""
    echo "Commands:"
    echo "  submit"
    echo "  kill"
    echo "  update" 
    echo "  show"
    echo "  -r <runs> -q <queue type> <job script> <validation file> <validation string>"    
}

function print_message {
    echo -e "$1"
}

function print_error {
    print_message "$1"
    exit 1
}

function autosubmit_jobs {

    # Check if things have been cleaned up from a previous Read the status file in the job directory
    [ -d "${autoSubmitDir}" ] &&
    print_message "Previous autosubmit directory found in job directory" &&
    print_error "Check that previous jobs are complete and remove:\n${autoSubmitDir}"

    mkdir -p "${autoSubmitDir}"

    # Generate submission command
    case $QUEUE in

	"pbs"|"PBS")
	    local _submitCMD=pbs_submit #"qsub $jobSubmitScript"
	    ;;
	 "lsf"|"LSF")
            local _submitCMD=lsf_submit #"${autoSubmitDir}/submit.sh ${jobSubmitScript}"
	    ;;
	*)
	    print_error "Specified queue not supported"
	    ;;
    esac
	
    
    # Update the status file
    update_status 0
    # #Initialize the status file
    # echo 0 > "$statusFile"

    local _jobNumber=0
    local _istop=0

    while (( $_istop == 0 ))
    do
	[ ! -d ${autoSubmitDir} ] &&
	print_message "autosubmit directory missing from job directory" &&
	print_error "Terminting ${scriptName} - please check for runaway jobs"

        # Read the status file in the job directory
	[ ! -f ${statusFile} ] && 
	print_message "Status file missing from job directory" &&
	print_error "Terminating ${scriptName} - any submitted jobs will not be stopped/deleted"

        # Read current job status
        local _status=$(cat $statusFile)

	if (( $_status == 0 )); then

          # Attept to start new case
          # The the number of runs left
	  autoRuns=$(cat $autoRunsFile)

	if (( $autoRuns > 0 )); then 

	    # If the validation file exists check it
	    if [ -f "${jobDir}/${jobCheckFile}" ]; then
		
		# For now just seeing if the whole word of the validation string is found. 
		# This should be unique to successful runs
		jobStringSearch=$(grep -w "$jobCheckString" "${jobDir}/${jobCheckFile}")
		if [ -z "$jobStringSearch" ]; then

		    # Job check string not found
		    # Clean up and exit
		    rm -f ${statusFile}
		    print_error "Previous job not completed correctly - terminating ${scriptName}!"

		fi

	    else
	    
		print_message "${jobCheckFile} not found in job directory - assuming initial submission"

	    fi

	    # Move to the job directory
	    cd $jobDir

	    # Update the job number and remaining runs
	    jobNumber=$(( jobNumber + 1 ))
	    autoRuns=$(( autoRuns - 1 ))
	    echo $autoRuns > "$autoRunsFile"
	    echo 1 > "$statusFile"

	    print_message "Submitting job $jobNumber"
	    $jobSubmitCmd

	else

	    # Cleanup
	    rm -f "$statusFile"
	    print_message "All jobs completed"
	    exit 0

	fi

    fi

    # Take a power nap
    sleep ${sleepTime}

done


}

######################################################################
# Initialize global variables
######################################################################
RUNS=0
QUEUE="pbs"
jobSubmitCmd="<null>"
jobCheckFile="<null>"
jobCheckString="<null>"

# job directory is assigned to the current one
jobDir=$(pwd)
autoSubmitDir="${jobDir}/.autosubmit"
# Set autoruns and status files
autoRunsFile="${autoSubmitDir}/autoruns"
statusFile="${autoSubmitDir}/status"

NARGS=$#
CMD="$1"
# Check arguments
(( $NARGS == 0 )) && print_usage

case $CMD in

    "submit")

	shift
	
	for (( i=0; i<2; i++ ))
	do
	    case "$1" in
		
		"-r")
		    shift
		    RUNS="$1"
		    ;;
		"-q")
		    shift
		    QUEUE="$1"
		    ;;
		*)
		    print_error "submit arguments specified incorrectly (see '${scriptName} help')"
		    ;;
	    esac
	done

	# Check remaining number of arguments
	(( $# != 3 )) && print_error "submit arguments specified incorrectly (see '${scriptName} help')"

	jobSubmitScript="$1"
	jobCheckFile="$2"
	jobCheckString="$3"

	submit_jobs
	;;

    "kill")
	kill_jobs
	;;
    "update")
	;;
    "show")
	;;
    "help"|"-h")
	print_usage
	;;
esac	    

	    
if (( $CMD == 1 )); then

    if [[ $1 == "-h" ]]; then
	print_usage 
	exit 0
    else
	print_usage
	exit 1
    fi

elif (( $# != 3 )); then
	
    print_usage
    exit 1
    
else

    jobSubmitCmd="$1"
    jobCheckFile="$2"
    jobCheckString="$3"

fi

exit 0
